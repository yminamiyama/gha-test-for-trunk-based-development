name: Python application Create release note

on:
  workflow_dispatch:
    inputs:
      major_release:
        description: meajor release(optional)
        type: boolean
        default: false
        required: false

      release_version:
        description: Specify release version(optional)=major_release will be ignored
        type: string
        required: false

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get latest tag
      id: cur_tag_var
      run: |
        git fetch --prune --unshallow
        echo "cur_tag=$(git tag --sort=creatordate | tail -n 1)" >> $GITHUB_OUTPUT
    - name: Set release tag
      id: set_release_tag
      run: |
        echo "${{ steps.cur_tag_var.outputs.cur_tag }}"

        if [[ "${{ github.event.inputs.release_version }}" != '' ]]; then
          echo 'Release Version is specified.'
          echo "TAG_NAME=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
        else
          if [[ "${{ steps.cur_tag_var.outputs.cur_tag }}" =~ ^[0-9].+$ ]]; then
            echo 'The version is valid.'
            CUR_VERSION=${{ steps.cur_tag_var.outputs.cur_tag }}
            VERSION=( ${CUR_VERSION//./ } )

            if ${{ github.event.inputs.major_release }}; then
              echo 'major release'
              ((VERSION[-2]+=1))
              VERSION[-1]=0
            else
              echo 'minor release'
              ((VERSION[-1]+=1))
            fi

            echo $NEW_VERSION
            NEW_VERSION=$(IFS="."; echo "${VERSION[*]}")
            echo "TAG_NAME=$NEW_VERSION" >> $GITHUB_ENV 
          else
            if [[ "${{ github.event.inputs.release_version }}" != '' ]]; then
              echo 'Cannout update the version so use just specified release version.'
              echo "TAG_NAME=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
            else
              echo 'Release tag is invalid'
              exit 1
            fi
          fi
        fi
        echo "TAG:"
        echo "${{ TAG_NAME }}" 
        echo "tag_name=${{ TAG_NAME }}" >> $GITHUB_OUTPUT
        
    - name: Push release tag
      id: set_git_tag
      run: |
        echo "${{ steps.set_release_tag.outputs.tag_name }}" 
