name: Python application Create release note

on:
  workflow_dispatch:
    inputs:
      major_release:
        description: meajor release(optional)
        type: boolean
        default: false
        required: false

      release_version:
        description: Specify release version(optional)=major_release will be ignored
        type: string
        required: false

permissions:
  actions: write
  checks: write
  contents: write

jobs:
  create-tag-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Get latest tag
      id: cur_tag_var
      run: |
        git fetch --prune --unshallow
        echo "cur_tag=$(git tag --sort=creatordate | tail -n 1)" >> $GITHUB_OUTPUT
    - name: Set release tag
      id: set_release_tag
      run: |
        echo "${{ steps.cur_tag_var.outputs.cur_tag }}"
        TAG_NAME=${{ steps.cur_tag_var.outputs.cur_tag }}
        echo $TAG_NAME
        if [[ "${{ github.event.inputs.release_version }}" != '' ]]; then
          echo 'Release Version is specified.'
          if [[ "${{ github.event.inputs.release_version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            TAG_NAME=${{ github.event.inputs.release_version }}
          else
            echo 'The version is invalid.'
            exit 1
          fi
        else
          if [[ "${{ steps.cur_tag_var.outputs.cur_tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo 'The version is valid.'
            CUR_VERSION=${{ steps.cur_tag_var.outputs.cur_tag }}

            VERSION=( ${CUR_VERSION/v/ })
            echo $VERSION
            VERSION_NUMBERS=( ${VERSION//./ } )
            echo $VERSION_NUMBERS

            if ${{ github.event.inputs.major_release }}; then
              echo 'major release'
              ((VERSION_NUMBERS[0]++))
              VERSION[1]=0
              VERSION[2]=0
              echo $VERSION_NUMBERS
            else
              echo 'minor release'
              ((VERSION[1]++))
              echo $VERSION_NUMBERS
            fi

            NEW_VERSION=v${VERSION_NUMBERS[0]}.${VERSION_NUMBERS[1]}.${VERSION_NUMBERS[2]}
            TAG_NAME=$NEW_VERSION
            echo $TAG_NAME
          else
            if [[ "${{ github.event.inputs.release_version }}" != '' ]]; then
              echo 'Cannout update the version so use just specified release version.'
              TAG_NAME=${{ github.event.inputs.release_version }}
              echo $TAG_NAME
            else
              echo 'Release tag is invalid'
              exit 1
            fi
          fi
        fi
        echo "TAG:"
        echo $TAG_NAME
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
    - name: Push release tag
      id: set_git_tag
      run: |
        echo "${{ steps.set_release_tag.outputs.tag_name }}" 
        git tag "${{ steps.set_release_tag.outputs.tag_name }}" 
        git push origin "${{ steps.set_release_tag.outputs.tag_name }}" 
      if: steps.set_release_tag.outcome == 'success'
